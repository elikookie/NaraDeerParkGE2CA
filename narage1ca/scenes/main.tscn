[gd_scene load_steps=19 format=3 uid="uid://faj6l2m0t4dj"]

[ext_resource type="PackedScene" uid="uid://bpqulhlxa6haq" path="res://scenes/deer.tscn" id="2_pm3ni"]
[ext_resource type="Material" uid="uid://dkah2efh2egsk" path="res://assets/materials/Grass004_4K-PNG/grass.tres" id="3_yc10j"]
[ext_resource type="PackedScene" uid="uid://ctltjqqlkh8xu" path="res://scenes/park.tscn" id="4_jyhfs"]
[ext_resource type="PackedScene" uid="uid://pl6vkch3v2xv" path="res://scenes/player.tscn" id="5_tbgi4"]
[ext_resource type="PackedScene" uid="uid://bcrh1wqigo3cp" path="res://scenes/sliders.tscn" id="6_tefeu"]
[ext_resource type="PackedScene" uid="uid://qn7usvhukmd8" path="res://scenes/shikaSenbeiStand.tscn" id="22_jscy8"]

[sub_resource type="GDScript" id="GDScript_gqmmt"]
script/source = "extends Node3D

@export var deer_scene: PackedScene
@export var number_of_deer: int = 10
@onready var deer_container: Node3D = $DeerContainer

func _ready() -> void:
	randomize()
	spawn_deer()

func spawn_deer() -> void:
	for i in range(number_of_deer):
		var deer = deer_scene.instantiate()
		deer_container.add_child(deer)
		# now that it's in the tree, it's safe to set its transform:
		var x = randf_range(-10.0, 15.0)
		var z = randf_range(-10.0, 15.0)
		deer.global_transform.origin = Vector3(x, 0.0, z)
		
"

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_o5qli"]
sky_top_color = Color(0.504832, 0.713647, 0.999999, 1)
sky_horizon_color = Color(0.308803, 0.702488, 0.978691, 1)
ground_bottom_color = Color(0, 0, 0, 1)
ground_horizon_color = Color(0.509545, 0.64217, 0.831475, 1)
energy_multiplier = 1.05

[sub_resource type="Sky" id="Sky_0wfyh"]
sky_material = SubResource("ProceduralSkyMaterial_o5qli")

[sub_resource type="Environment" id="Environment_sugp2"]
background_mode = 2
sky = SubResource("Sky_0wfyh")
tonemap_mode = 2
ssr_enabled = true
ssao_enabled = true
ssil_enabled = true
sdfgi_enabled = true
glow_enabled = true
glow_normalized = true
glow_strength = 1.05
fog_mode = 1
fog_light_color = Color(0.922522, 0.795554, 0.92826, 1)
fog_light_energy = 0.29
fog_density = 1.0
volumetric_fog_enabled = true
volumetric_fog_density = 0.0106
volumetric_fog_albedo = Color(1, 0.890196, 1, 1)

[sub_resource type="BoxMesh" id="BoxMesh_yc10j"]
size = Vector3(50, 1, 50)

[sub_resource type="BoxShape3D" id="BoxShape3D_jscy8"]
size = Vector3(69.3692, 1, 65.8759)

[sub_resource type="Shader" id="Shader_tefeu"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset + TIME * 0.02;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_tefeu"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_o6xl0"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_tefeu")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_tipki"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_tefeu")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_o6xl0"]
render_priority = 0
shader = SubResource("Shader_tefeu")
shader_parameter/albedo = Color(0.356863, 0.584314, 0.784314, 0.65098)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_tipki")
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_o6xl0")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.01, 0.01, 0.01)
shader_parameter/uv1_offset = Vector3(0.04, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_choun"]
material = SubResource("ShaderMaterial_o6xl0")
size = Vector3(500, 1, 500)

[node name="Node3D" type="Node3D"]
script = SubResource("GDScript_gqmmt")
deer_scene = ExtResource("2_pm3ni")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.702143, -0.710716, -0.0433333, 0.657472, 0.623771, 0.422658, -0.27336, -0.325257, 0.905253, -17.2118, 21.0533, 27.2065)
light_color = Color(1, 0.928739, 0.763589, 1)
light_bake_mode = 1
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_sugp2")

[node name="ground" type="StaticBody3D" parent="."]

[node name="MeshInstance3D" type="MeshInstance3D" parent="ground"]
transform = Transform3D(1.27941, 0, 0, 0, 1, 0, 0, 0, 1.28471, 4.93874, 0.0614529, 0.582323)
material_override = ExtResource("3_yc10j")
mesh = SubResource("BoxMesh_yc10j")

[node name="CollisionShape3D" type="CollisionShape3D" parent="ground"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 6.2101, 0, 0.142975)
shape = SubResource("BoxShape3D_jscy8")

[node name="MC" parent="." instance=ExtResource("5_tbgi4")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -21.7587, 1.93716, -0.848487)

[node name="park" parent="." instance=ExtResource("4_jyhfs")]

[node name="DeerContainer" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.00613594, -1.90735e-06, -0.0780106)

[node name="deerCookies" parent="." instance=ExtResource("22_jscy8")]
transform = Transform3D(-0.464858, 0, 0.535125, 0, 0.703096, 0, -0.608977, 0, -0.408483, -15.2062, 0.685387, 5.36003)

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Sliders" parent="CanvasLayer" instance=ExtResource("6_tefeu")]

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.00400925, -0.415749, -0.183105)
mesh = SubResource("BoxMesh_choun")
